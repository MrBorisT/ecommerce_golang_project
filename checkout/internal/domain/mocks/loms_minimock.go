package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i route256/checkout/internal/domain.LOMS -o ./mocks/loms_minimock.go -n LOMSMock

import (
	"context"
	"route256/checkout/internal/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// LOMSMock implements domain.LOMS
type LOMSMock struct {
	t minimock.Tester

	funcCreateOrder          func(ctx context.Context, user int64, items []model.Item) (i1 int64, err error)
	inspectFuncCreateOrder   func(ctx context.Context, user int64, items []model.Item)
	afterCreateOrderCounter  uint64
	beforeCreateOrderCounter uint64
	CreateOrderMock          mLOMSMockCreateOrder

	funcStocks          func(ctx context.Context, sku uint32) (sa1 []model.Stock, err error)
	inspectFuncStocks   func(ctx context.Context, sku uint32)
	afterStocksCounter  uint64
	beforeStocksCounter uint64
	StocksMock          mLOMSMockStocks
}

// NewLOMSMock returns a mock for domain.LOMS
func NewLOMSMock(t minimock.Tester) *LOMSMock {
	m := &LOMSMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateOrderMock = mLOMSMockCreateOrder{mock: m}
	m.CreateOrderMock.callArgs = []*LOMSMockCreateOrderParams{}

	m.StocksMock = mLOMSMockStocks{mock: m}
	m.StocksMock.callArgs = []*LOMSMockStocksParams{}

	return m
}

type mLOMSMockCreateOrder struct {
	mock               *LOMSMock
	defaultExpectation *LOMSMockCreateOrderExpectation
	expectations       []*LOMSMockCreateOrderExpectation

	callArgs []*LOMSMockCreateOrderParams
	mutex    sync.RWMutex
}

// LOMSMockCreateOrderExpectation specifies expectation struct of the LOMS.CreateOrder
type LOMSMockCreateOrderExpectation struct {
	mock    *LOMSMock
	params  *LOMSMockCreateOrderParams
	results *LOMSMockCreateOrderResults
	Counter uint64
}

// LOMSMockCreateOrderParams contains parameters of the LOMS.CreateOrder
type LOMSMockCreateOrderParams struct {
	ctx   context.Context
	user  int64
	items []model.Item
}

// LOMSMockCreateOrderResults contains results of the LOMS.CreateOrder
type LOMSMockCreateOrderResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for LOMS.CreateOrder
func (mmCreateOrder *mLOMSMockCreateOrder) Expect(ctx context.Context, user int64, items []model.Item) *mLOMSMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LOMSMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LOMSMockCreateOrderExpectation{}
	}

	mmCreateOrder.defaultExpectation.params = &LOMSMockCreateOrderParams{ctx, user, items}
	for _, e := range mmCreateOrder.expectations {
		if minimock.Equal(e.params, mmCreateOrder.defaultExpectation.params) {
			mmCreateOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateOrder.defaultExpectation.params)
		}
	}

	return mmCreateOrder
}

// Inspect accepts an inspector function that has same arguments as the LOMS.CreateOrder
func (mmCreateOrder *mLOMSMockCreateOrder) Inspect(f func(ctx context.Context, user int64, items []model.Item)) *mLOMSMockCreateOrder {
	if mmCreateOrder.mock.inspectFuncCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("Inspect function is already set for LOMSMock.CreateOrder")
	}

	mmCreateOrder.mock.inspectFuncCreateOrder = f

	return mmCreateOrder
}

// Return sets up results that will be returned by LOMS.CreateOrder
func (mmCreateOrder *mLOMSMockCreateOrder) Return(i1 int64, err error) *LOMSMock {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LOMSMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LOMSMockCreateOrderExpectation{mock: mmCreateOrder.mock}
	}
	mmCreateOrder.defaultExpectation.results = &LOMSMockCreateOrderResults{i1, err}
	return mmCreateOrder.mock
}

// Set uses given function f to mock the LOMS.CreateOrder method
func (mmCreateOrder *mLOMSMockCreateOrder) Set(f func(ctx context.Context, user int64, items []model.Item) (i1 int64, err error)) *LOMSMock {
	if mmCreateOrder.defaultExpectation != nil {
		mmCreateOrder.mock.t.Fatalf("Default expectation is already set for the LOMS.CreateOrder method")
	}

	if len(mmCreateOrder.expectations) > 0 {
		mmCreateOrder.mock.t.Fatalf("Some expectations are already set for the LOMS.CreateOrder method")
	}

	mmCreateOrder.mock.funcCreateOrder = f
	return mmCreateOrder.mock
}

// When sets expectation for the LOMS.CreateOrder which will trigger the result defined by the following
// Then helper
func (mmCreateOrder *mLOMSMockCreateOrder) When(ctx context.Context, user int64, items []model.Item) *LOMSMockCreateOrderExpectation {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LOMSMock.CreateOrder mock is already set by Set")
	}

	expectation := &LOMSMockCreateOrderExpectation{
		mock:   mmCreateOrder.mock,
		params: &LOMSMockCreateOrderParams{ctx, user, items},
	}
	mmCreateOrder.expectations = append(mmCreateOrder.expectations, expectation)
	return expectation
}

// Then sets up LOMS.CreateOrder return parameters for the expectation previously defined by the When method
func (e *LOMSMockCreateOrderExpectation) Then(i1 int64, err error) *LOMSMock {
	e.results = &LOMSMockCreateOrderResults{i1, err}
	return e.mock
}

// CreateOrder implements domain.LOMS
func (mmCreateOrder *LOMSMock) CreateOrder(ctx context.Context, user int64, items []model.Item) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreateOrder.beforeCreateOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateOrder.afterCreateOrderCounter, 1)

	if mmCreateOrder.inspectFuncCreateOrder != nil {
		mmCreateOrder.inspectFuncCreateOrder(ctx, user, items)
	}

	mm_params := &LOMSMockCreateOrderParams{ctx, user, items}

	// Record call args
	mmCreateOrder.CreateOrderMock.mutex.Lock()
	mmCreateOrder.CreateOrderMock.callArgs = append(mmCreateOrder.CreateOrderMock.callArgs, mm_params)
	mmCreateOrder.CreateOrderMock.mutex.Unlock()

	for _, e := range mmCreateOrder.CreateOrderMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateOrder.CreateOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateOrder.CreateOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateOrder.CreateOrderMock.defaultExpectation.params
		mm_got := LOMSMockCreateOrderParams{ctx, user, items}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateOrder.t.Errorf("LOMSMock.CreateOrder got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateOrder.CreateOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateOrder.t.Fatal("No results are set for the LOMSMock.CreateOrder")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateOrder.funcCreateOrder != nil {
		return mmCreateOrder.funcCreateOrder(ctx, user, items)
	}
	mmCreateOrder.t.Fatalf("Unexpected call to LOMSMock.CreateOrder. %v %v %v", ctx, user, items)
	return
}

// CreateOrderAfterCounter returns a count of finished LOMSMock.CreateOrder invocations
func (mmCreateOrder *LOMSMock) CreateOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.afterCreateOrderCounter)
}

// CreateOrderBeforeCounter returns a count of LOMSMock.CreateOrder invocations
func (mmCreateOrder *LOMSMock) CreateOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.beforeCreateOrderCounter)
}

// Calls returns a list of arguments used in each call to LOMSMock.CreateOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateOrder *mLOMSMockCreateOrder) Calls() []*LOMSMockCreateOrderParams {
	mmCreateOrder.mutex.RLock()

	argCopy := make([]*LOMSMockCreateOrderParams, len(mmCreateOrder.callArgs))
	copy(argCopy, mmCreateOrder.callArgs)

	mmCreateOrder.mutex.RUnlock()

	return argCopy
}

// MinimockCreateOrderDone returns true if the count of the CreateOrder invocations corresponds
// the number of defined expectations
func (m *LOMSMock) MinimockCreateOrderDone() bool {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateOrderInspect logs each unmet expectation
func (m *LOMSMock) MinimockCreateOrderInspect() {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LOMSMock.CreateOrder with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		if m.CreateOrderMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LOMSMock.CreateOrder")
		} else {
			m.t.Errorf("Expected call to LOMSMock.CreateOrder with params: %#v", *m.CreateOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		m.t.Error("Expected call to LOMSMock.CreateOrder")
	}
}

type mLOMSMockStocks struct {
	mock               *LOMSMock
	defaultExpectation *LOMSMockStocksExpectation
	expectations       []*LOMSMockStocksExpectation

	callArgs []*LOMSMockStocksParams
	mutex    sync.RWMutex
}

// LOMSMockStocksExpectation specifies expectation struct of the LOMS.Stocks
type LOMSMockStocksExpectation struct {
	mock    *LOMSMock
	params  *LOMSMockStocksParams
	results *LOMSMockStocksResults
	Counter uint64
}

// LOMSMockStocksParams contains parameters of the LOMS.Stocks
type LOMSMockStocksParams struct {
	ctx context.Context
	sku uint32
}

// LOMSMockStocksResults contains results of the LOMS.Stocks
type LOMSMockStocksResults struct {
	sa1 []model.Stock
	err error
}

// Expect sets up expected params for LOMS.Stocks
func (mmStocks *mLOMSMockStocks) Expect(ctx context.Context, sku uint32) *mLOMSMockStocks {
	if mmStocks.mock.funcStocks != nil {
		mmStocks.mock.t.Fatalf("LOMSMock.Stocks mock is already set by Set")
	}

	if mmStocks.defaultExpectation == nil {
		mmStocks.defaultExpectation = &LOMSMockStocksExpectation{}
	}

	mmStocks.defaultExpectation.params = &LOMSMockStocksParams{ctx, sku}
	for _, e := range mmStocks.expectations {
		if minimock.Equal(e.params, mmStocks.defaultExpectation.params) {
			mmStocks.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStocks.defaultExpectation.params)
		}
	}

	return mmStocks
}

// Inspect accepts an inspector function that has same arguments as the LOMS.Stocks
func (mmStocks *mLOMSMockStocks) Inspect(f func(ctx context.Context, sku uint32)) *mLOMSMockStocks {
	if mmStocks.mock.inspectFuncStocks != nil {
		mmStocks.mock.t.Fatalf("Inspect function is already set for LOMSMock.Stocks")
	}

	mmStocks.mock.inspectFuncStocks = f

	return mmStocks
}

// Return sets up results that will be returned by LOMS.Stocks
func (mmStocks *mLOMSMockStocks) Return(sa1 []model.Stock, err error) *LOMSMock {
	if mmStocks.mock.funcStocks != nil {
		mmStocks.mock.t.Fatalf("LOMSMock.Stocks mock is already set by Set")
	}

	if mmStocks.defaultExpectation == nil {
		mmStocks.defaultExpectation = &LOMSMockStocksExpectation{mock: mmStocks.mock}
	}
	mmStocks.defaultExpectation.results = &LOMSMockStocksResults{sa1, err}
	return mmStocks.mock
}

// Set uses given function f to mock the LOMS.Stocks method
func (mmStocks *mLOMSMockStocks) Set(f func(ctx context.Context, sku uint32) (sa1 []model.Stock, err error)) *LOMSMock {
	if mmStocks.defaultExpectation != nil {
		mmStocks.mock.t.Fatalf("Default expectation is already set for the LOMS.Stocks method")
	}

	if len(mmStocks.expectations) > 0 {
		mmStocks.mock.t.Fatalf("Some expectations are already set for the LOMS.Stocks method")
	}

	mmStocks.mock.funcStocks = f
	return mmStocks.mock
}

// When sets expectation for the LOMS.Stocks which will trigger the result defined by the following
// Then helper
func (mmStocks *mLOMSMockStocks) When(ctx context.Context, sku uint32) *LOMSMockStocksExpectation {
	if mmStocks.mock.funcStocks != nil {
		mmStocks.mock.t.Fatalf("LOMSMock.Stocks mock is already set by Set")
	}

	expectation := &LOMSMockStocksExpectation{
		mock:   mmStocks.mock,
		params: &LOMSMockStocksParams{ctx, sku},
	}
	mmStocks.expectations = append(mmStocks.expectations, expectation)
	return expectation
}

// Then sets up LOMS.Stocks return parameters for the expectation previously defined by the When method
func (e *LOMSMockStocksExpectation) Then(sa1 []model.Stock, err error) *LOMSMock {
	e.results = &LOMSMockStocksResults{sa1, err}
	return e.mock
}

// Stocks implements domain.LOMS
func (mmStocks *LOMSMock) Stocks(ctx context.Context, sku uint32) (sa1 []model.Stock, err error) {
	mm_atomic.AddUint64(&mmStocks.beforeStocksCounter, 1)
	defer mm_atomic.AddUint64(&mmStocks.afterStocksCounter, 1)

	if mmStocks.inspectFuncStocks != nil {
		mmStocks.inspectFuncStocks(ctx, sku)
	}

	mm_params := &LOMSMockStocksParams{ctx, sku}

	// Record call args
	mmStocks.StocksMock.mutex.Lock()
	mmStocks.StocksMock.callArgs = append(mmStocks.StocksMock.callArgs, mm_params)
	mmStocks.StocksMock.mutex.Unlock()

	for _, e := range mmStocks.StocksMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sa1, e.results.err
		}
	}

	if mmStocks.StocksMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStocks.StocksMock.defaultExpectation.Counter, 1)
		mm_want := mmStocks.StocksMock.defaultExpectation.params
		mm_got := LOMSMockStocksParams{ctx, sku}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStocks.t.Errorf("LOMSMock.Stocks got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStocks.StocksMock.defaultExpectation.results
		if mm_results == nil {
			mmStocks.t.Fatal("No results are set for the LOMSMock.Stocks")
		}
		return (*mm_results).sa1, (*mm_results).err
	}
	if mmStocks.funcStocks != nil {
		return mmStocks.funcStocks(ctx, sku)
	}
	mmStocks.t.Fatalf("Unexpected call to LOMSMock.Stocks. %v %v", ctx, sku)
	return
}

// StocksAfterCounter returns a count of finished LOMSMock.Stocks invocations
func (mmStocks *LOMSMock) StocksAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStocks.afterStocksCounter)
}

// StocksBeforeCounter returns a count of LOMSMock.Stocks invocations
func (mmStocks *LOMSMock) StocksBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStocks.beforeStocksCounter)
}

// Calls returns a list of arguments used in each call to LOMSMock.Stocks.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStocks *mLOMSMockStocks) Calls() []*LOMSMockStocksParams {
	mmStocks.mutex.RLock()

	argCopy := make([]*LOMSMockStocksParams, len(mmStocks.callArgs))
	copy(argCopy, mmStocks.callArgs)

	mmStocks.mutex.RUnlock()

	return argCopy
}

// MinimockStocksDone returns true if the count of the Stocks invocations corresponds
// the number of defined expectations
func (m *LOMSMock) MinimockStocksDone() bool {
	for _, e := range m.StocksMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StocksMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStocksCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStocks != nil && mm_atomic.LoadUint64(&m.afterStocksCounter) < 1 {
		return false
	}
	return true
}

// MinimockStocksInspect logs each unmet expectation
func (m *LOMSMock) MinimockStocksInspect() {
	for _, e := range m.StocksMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LOMSMock.Stocks with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StocksMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStocksCounter) < 1 {
		if m.StocksMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LOMSMock.Stocks")
		} else {
			m.t.Errorf("Expected call to LOMSMock.Stocks with params: %#v", *m.StocksMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStocks != nil && mm_atomic.LoadUint64(&m.afterStocksCounter) < 1 {
		m.t.Error("Expected call to LOMSMock.Stocks")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LOMSMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateOrderInspect()

		m.MinimockStocksInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LOMSMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LOMSMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateOrderDone() &&
		m.MinimockStocksDone()
}
